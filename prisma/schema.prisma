// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id         String    @id @default(uuid())
  name       String
  email      String    @unique
  password   String
  isAdmin    Boolean   @default(false)
  isVerified Boolean   @default(false)
  image      String?
  createdAt  DateTime  @default(now()) @db.Timestamp()
  updatedAt  DateTime? @updatedAt @db.Timestamp()

  enfant Enfant[]

  @@map("users")
}

model Enfant {
  id            Int      @id @default(autoincrement())
  nom           String 
  prenom        String   
  telephone     String?
  email         String? @unique
  dateNaissance DateTime @db.Timestamp()
  idReferent    String

  evenements Evenement[]
  document   Document[]
  referent   User        @relation(fields: [idReferent], references: [id])
}

model Document {
  id              Int    @id @default(autoincrement())
  libelleDocument String
  cheminDocument  String
  idEnfant        Int
  enfant          Enfant @relation(fields: [idEnfant], references: [id])
}

model EdtSemaine {
  id           Int       @id @default(autoincrement())
  debutSemaine DateTime  @db.Timestamp()
  jours        EdtJour[] // Relation avec les jours de la semaine
}

model EdtJour {
  id         Int        @id @default(autoincrement())
  date       DateTime   @db.Timestamp()
  idSemaine  Int
  edtSemaine EdtSemaine @relation(fields: [idSemaine], references: [id])

  sequencesJournee Evenement[] // Relation avec les séquences de la journée
}

model Evenement {
  id          Int      @id @default(autoincrement())
  dateDebut   DateTime @db.Timestamp()
  dateFin     DateTime @default(now()) @db.Timestamp()
  titre       String  
  description String?

  idJour      Int
  idEnfant    Int
  idCategorie Int?

  enfant    Enfant     @relation(fields: [idEnfant], references: [id])
  jour      EdtJour    @relation(fields: [idJour], references: [id])
  categorie Categorie? @relation(fields: [idCategorie], references: [id])
}

model Categorie {
  id          Int     @id @default(autoincrement())
  libelle     String  @unique
  description String?
  couleur     String?
  important   Boolean @default(false)

  evenements Evenement[]
  tags       CategorieTag[]
}

model CategorieTag {
  idCategorie Int
  idTag       Int

  tag       Tag       @relation(fields: [idTag], references: [id])
  categorie Categorie @relation(fields: [idCategorie], references: [id])

  @@id([idCategorie, idTag])
}

model Tag {
  id          Int     @id @default(autoincrement())
  libelle     String  @unique
  description String?
  couleur     String?

  categories CategorieTag[]
}
